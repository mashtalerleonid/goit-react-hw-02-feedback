{"version":3,"sources":["components/Feedback/Section/Section.jsx","components/Feedback/FeedbackOptions/FeedbackOptions.styled.jsx","components/Feedback/FeedbackOptions/FeedbackOptions.jsx","components/Feedback/Statistics/Statistics.styled.jsx","components/Feedback/Statistics/Statistics.jsx","components/Feedback/FeedbackSection/FeedbackSection.jsx","App.jsx","index.js"],"names":["Section","title","children","Button","styled","button","FeedbackOptions","onLeaveFeedback","options","map","option","type","toLowerCase","onClick","FeedbakcTypes","div","Type","p","Statistics","good","neutral","bad","total","positivePercentage","FeedbackSection","state","props","initialGood","initialNeutral","initialBad","handleFeedback","e","feedbackOption","target","dataset","setState","prev","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","Component","defaultProps","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQAgBeA,I,EAAAA,EAdf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,gCACE,6BAAKD,IACJC,M,cCJMC,EAASC,IAAOC,OAAV,mDCuBJC,I,IAAAA,EAtBf,YAAwD,IAA7BC,EAA4B,EAA5BA,gBAAiBC,EAAW,EAAXA,QAC1C,OACE,8BACGA,EAAQC,KAAI,SAAAC,GAAM,OACjB,cAACP,EAAD,CAEEQ,KAAK,SACL,cAAaD,EAAOE,cACpBC,QAASN,EAJX,SAMGG,GALIA,SCNFI,EAAgBV,IAAOW,IAAV,8CAIbC,EAAOZ,IAAOa,EAAV,mDCoBFC,MAvBf,YAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC/C,OACE,gCACE,eAACT,EAAD,WACE,eAACE,EAAD,oBAAaG,KACb,eAACH,EAAD,uBAAgBI,KAChB,eAACJ,EAAD,mBAAYK,QAGd,wCAAWC,KACX,oDAAuBC,EAAvB,WCRAC,E,4MAQJC,MAAQ,CACNN,KAAM,EAAKO,MAAMC,YACjBP,QAAS,EAAKM,MAAME,eACpBP,IAAK,EAAKK,MAAMG,Y,EAGlBC,eAAiB,SAAAC,GACf,IAAMC,EAAiBD,EAAEE,OAAOC,QAAQxB,OAExC,EAAKyB,UAAS,SAAAC,GAAI,sBACfJ,EAAiBI,EAAKJ,GAAkB,O,EAI7CK,mBAAqB,WACnB,OAAO,EAAKZ,MAAMN,KAAO,EAAKM,MAAML,QAAU,EAAKK,MAAMJ,K,EAG3DiB,gCAAkC,WAChC,OAAOC,KAAKC,MAAO,EAAKf,MAAMN,KAAO,EAAKkB,qBAAwB,M,4CAGpE,WACE,MAA+BI,KAAKhB,MAA5BN,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAEvB,OACE,gCACE,cAAC,EAAD,CAASpB,MAAM,wBAAf,SACE,cAAC,EAAD,CACEM,gBAAiBkC,KAAKX,eACtBtB,QAASiC,KAAKf,MAAMlB,YAIvBiC,KAAKJ,qBACJ,cAAC,EAAD,CAASpC,MAAM,aAAf,SACE,cAAC,EAAD,CACEkB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOmB,KAAKJ,qBACZd,mBAAoBkB,KAAKH,sCAI7B,yD,GArDoBI,aAAxBlB,EACGmB,aAAe,CACpBhB,YAAa,EACbC,eAAgB,EAChBC,WAAY,EACZrB,QAAS,CAAC,OAAQ,UAAW,QAuDlBgB,QCzDAoB,MAJf,WACE,OAAO,cAAC,EAAD,KCATC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.232ee5fb.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nfunction Section({ title, children }) {\r\n  return (\r\n    <div>\r\n      <h1>{title}</h1>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Section;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const Button = styled.button`\r\n  margin-right: 10px;\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { Button } from './FeedbackOptions.styled';\r\n\r\nfunction FeedbackOptions({ onLeaveFeedback, options }) {\r\n  return (\r\n    <div>\r\n      {options.map(option => (\r\n        <Button\r\n          key={option}\r\n          type=\"button\"\r\n          data-option={option.toLowerCase()}\r\n          onClick={onLeaveFeedback}\r\n        >\r\n          {option}\r\n        </Button>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  onLeaveFeedback: PropTypes.func,\r\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const FeedbakcTypes = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nexport const Type = styled.p`\r\n  margin-right: 10px;\r\n`;\r\n","import { FeedbakcTypes, Type } from './Statistics.styled';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Statistics({ good, neutral, bad, total, positivePercentage }) {\r\n  return (\r\n    <div>\r\n      <FeedbakcTypes>\r\n        <Type>Good: {good}</Type>\r\n        <Type>Neutral: {neutral}</Type>\r\n        <Type>Bad: {bad}</Type>\r\n      </FeedbakcTypes>\r\n\r\n      <p>Total: {total}</p>\r\n      <p>Positive feedback: {positivePercentage}%</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import React, { Component } from 'react';\r\nimport Section from 'components/Feedback/Section';\r\nimport FeedbackOptions from 'components/Feedback/FeedbackOptions';\r\nimport Statistics from 'components/Feedback/Statistics';\r\n\r\nclass FeedbackSection extends Component {\r\n  static defaultProps = {\r\n    initialGood: 0,\r\n    initialNeutral: 0,\r\n    initialBad: 0,\r\n    options: ['Good', 'Neutral', 'Bad'],\r\n  };\r\n\r\n  state = {\r\n    good: this.props.initialGood,\r\n    neutral: this.props.initialNeutral,\r\n    bad: this.props.initialBad,\r\n  };\r\n\r\n  handleFeedback = e => {\r\n    const feedbackOption = e.target.dataset.option;\r\n\r\n    this.setState(prev => ({\r\n      [feedbackOption]: prev[feedbackOption] + 1,\r\n    }));\r\n  };\r\n\r\n  countTotalFeedback = () => {\r\n    return this.state.good + this.state.neutral + this.state.bad;\r\n  };\r\n\r\n  countPositiveFeedbackPercentage = () => {\r\n    return Math.round((this.state.good / this.countTotalFeedback()) * 100);\r\n  };\r\n\r\n  render() {\r\n    const { good, neutral, bad } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <Section title=\"Please leave feedback\">\r\n          <FeedbackOptions\r\n            onLeaveFeedback={this.handleFeedback}\r\n            options={this.props.options}\r\n          />\r\n        </Section>\r\n\r\n        {this.countTotalFeedback() ? (\r\n          <Section title=\"Statistics\">\r\n            <Statistics\r\n              good={good}\r\n              neutral={neutral}\r\n              bad={bad}\r\n              total={this.countTotalFeedback()}\r\n              positivePercentage={this.countPositiveFeedbackPercentage()}\r\n            />\r\n          </Section>\r\n        ) : (\r\n          <p>No feedback given</p>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FeedbackSection;\r\n","import React from 'react';\n\nimport FeedbackSection from 'components/Feedback/FeedbackSection';\n\nfunction App() {\n  return <FeedbackSection />;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}